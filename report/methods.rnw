\newpage

\section{Methods}


The method section describes the selected Geospatial Tools and documents the workflows to develop the accuracy assessment (Lemon Canyon) and upscaling-prototype of our test region (Lake Tahoe basin). Currently GDAL\footnote{GDAL documentation: \url{https://gdal.org/}} is used as the primary source of geospatial processing and all relevant geospatial tools created to convert, reproject and align the datasets are reported below. A detailed documentation for the geospatial processing deployed for our test region can be found on the Github repository\footnote{GitHub repository: \url{https://github.com/Vibrant-Planet/vp-csm}}. While this initial proof-of-concept is not considered to meet the required level of accuracy, it is designed to demonstrate the overall feasibility of the data collation, exercising all required pathways from data acquisition to output generation.

\subsection{Geospatial Tools}

\subsubsection{Geospatial Data Abstraction Library (GDAL) Usage}

The Geospatial Data Abstraction Library or GDAL, is an open source library specifically developed for working with raster and vector geospatial data. For raster processing, GDAL libraries are implemented in the backend across the majority of geospatial software tools used today including ArcGIS, FME, and QGIS. The power in GDAL is its command line capability for geospatial data processing. GDAL is is relatively easy to script/scale, is well doucmented, and works with virtually all major geospatial data types.

For the purposes of our project, we are leveraging GDAL 3.2.2 for all our important raster processing:
\begin{itemize}
    \item Reprojections (\texttt{gdalwarp})
    \item Resampling (\texttt{gdal\_translate/gdalwarp})
    \item Masking (\texttt{gdal\_translate/gdalwarp})
    \item Data type conversions (\texttt{gdal\_translate})
    \item Metadata queries (\texttt{gdalinfo})
    \item Raster calculations (\texttt{gdal\_calc.py})
    \item Rasterization (\texttt{gdal\_rasterize})
\end{itemize}

Additionally, we are implementing GDAL's capabilities to create:
\begin{itemize}
    \item Hillshade
    \item Slope
    \item Aspect
    \item Roughness
\end{itemize}

\subsubsection{PostGIS/PostgreSQL Usage}

PostgreSQL (13.3) used to manage vector data as tables. PostGIS is an extension for PostgreSQL providing capabilities to manage these tables as geospatial layers. Vector data is uploaded to PostgreSQL using ogr2ogr. This method allows us to directly load 'file geodatabase' file types to our database without the need to covert to shapefile first. Conversion to shapefile truncates the column names; therefore, this is very useful tool helping keep our data intact. Utilizing ogr2ogr as our upload also allows us to force all geometries to multipolygon, further cleaning and generalizing the data.

Both the Calveg and FRID (vegetation classification layers) require cleaning and correction of invalid geometries. These are large complex data sets containing millions of vertices and complex geometries. PostGIS (2.4) is an excellent tool for handling these types of large operations. Cleaning is a necessary step for upstream processes like rasterization, but also necessary to work with the data properly.  Once clean, we export the tables using ogr2ogr. Using this command as an export provides us the opportunity to build a single unified shapefile.  Working with a single shapefile, although large, permits easy clips of the data using a bounding box. In the future, it is more likely we will skip the export back to shapefile and query regions directly from the PostgreSQL table instead, leveraging the speed and power of properly indexed data.  For now, our process is tested and functioning.

\subsubsection{Vector Rasterization}

Rasterization of vectors is necessary for our machine learning models. If we are doing pixel to pixel comparisons, the vector data must be in the same format.  Rather than rasterizing the entire vector data set, we clip the data in the shapefile as needed and perfrom the rasterization on the fly.  At the time of the conversion to raster we pass the necessary extents and resolution for the output. We've found this method to be quick since the read and storage of vector data is more efficient.

\subsubsection{Point Cloud Data Abstraction Library (PDAL) Usage}

PDAL (2.3.0) is an open library written in C++ for managing and processing point cloud data. This tool is similar to LASTools in the Windows environment and offers similar capabilities. The advantages for us in using PDAL for this project are many. One, PDAL is an easily scripted tool allowing for scaling. At its core, PDAL utilizes JSON configurations called pipelines and allows us to string multiple processes into single documents. This method for developing individual complex pipelines for point clouds gives us the control needed to run these processes across myriad cores.  Two, PDAL is developed to handle varied point cloud data types outside of the traditional ASPRS LAS. This may be important as we begin to generate surfaces from varied sources. Three, being an open library, we can if needed build additional capabilities in to the tool. One example being, adding additional libraries for reading LAS and LAZ formats.

In our project, we are implementing PDAL for point cloud filtering plus, generation of Digital Terrain Models (DTM) and Digital Surface Models (DSM). In a basic PDAL process we will:
\begin{enumerate}
    \item Refine point clouds into ground and non-ground points
    \item Generate Digital Terrain Model (DTM) interpolation from ground points
    \item Generate Digital Surface Model (DSM) interpolation from highest points
\end{enumerate}

Results from the generation of the DTM and DSM are then used to calculate the Canopy Height Model (CHM).

PDAL is not developed specifically for the generation of surface grids (rasters); however, it does provide this capability when generating output in geoTIFF format. For the generation of surface rasters, an interpolation method is necessary to create a uniform surface. PDAL integrates an additional library called, points2grid to accomplish this. Points2grid utilizes the Inverse Distance Weighted (IDW) method for its interpolations. This method is powerful in creating accurate interpolations, but can have limitations. Notably, the IDW method does not interpolate over large areas where data is not present. Specifically, in our surface generations, this results in regions of 'nodata' where there are insufficient ground points for interpolation.  This is a known outcome and currently addressed by increasing the window size for the IDW to search for neighboring points.  Currently, we are confident in this solution for addressing 'nodata' regions of the surface model; however, we are continuing to research other solutions (e.g. Triangulated Irregular Networks).


\subsubsection{Sentinel 2 Handling}

Handling and manipulation of Sentinel 2 data is performed using GDAL. Raw Sentinel data comes to us in JP2 format and is projected in its corresponding UTM zone. Our first operation is to bring all the Sentinel into a singlular projection, California Albers (EPSG:3310). For the purposes of geospatial operations, we also convert images into GeoTiff format. If needed, Sentinel-2 images are re-sampled into 10m resolution. Our re-sampling method is to use gdal\_translate and to split the pixel, e.g a 20m resolution pixel is split into four new pixels to achieve 10m resolution.

\subsubsection{Pixel Alignment}

In order to have clean pixel sampling, we need to ensure all our data aligns to be the best of our abilities.  This is ensured through several processes. First, projection. All data for our project is ensure to be in the same projection wih the same origin. Second, resolution. Each data set is always forced into a 10m resolution when GDAl commands allow.  Third, extents.  extents are always captured the the beginning of a process and reapplied to the outputs. Forth, scripting.  Scripting allows us to build repeatable processes capturing all the parameters needed along the way.


\subsubsection{Canopy Height Model (CHM) Calculation}

Calculation of the CHM (\autoref{eq:chm}) is an important aspect of our project, but a rather easy process.

\begin{equation}
CHM= DSM - DTM
\label {eq:chm}
\end{equation}

We are using \texttt{gdal\_calc.py} for this operation. Gdal{\_}calc.py is a commandline tool offered by the GDAL library. Importantly, this tool provides us control over extents and data types of the outputs. Setting and switching between data types, like UInt16 and Float32, is important for keeping all our data in the same format.


\subsection{CHM Accuracy Assessment}

To demonstrate our confidence in our CHM model the prototype development is preceded by an accuracy assessment for the generation of CHM’s from different sources. Our test region is located in the Lemon Canyon (\autoref{fig:lemoncanyon}, California) approximately 50 km North from the Lake Tahoe test region. We selected this area due to it’s proximity to our prototype, valley structure with a range of distinct topographic features (e.g. slopes, aspects) and one of the available LiDAR verification plots located within the test boundaries ($\sim$ 2.7 km$^2$). For this plot we downloaded a subset of the 2014 LiDAR dataset from the national center for airborne laser mapping (NCALM) with 5 - 35 cm (8.93~pts~m$^{-2}$) accuracy from a publicly available source (OpenTopography, 2014). The dataset provides pre-calculated digital terrain model (DTM), digital surface model (DSM) and derived canopy height model (CHM).

\begin{figure}[H]
\centering
    \includegraphics[scale=0.75]{s3/images/referenceMap_lemonCanyon.png}
    \captionof{figure}{Lemon Canyon Test Region}
    \label{fig:lemoncanyon}
\end{figure}

In the following layer comparison we refer to Vibrant Planet products as *.vp, Opentopography as *.topo and Dragonfly as *.fly.

In the accuracy assessment we will use the OpenTopography provided model (1) as a reference against the Fusion (2) and PDAL (3) generated outputs. While the OpenTopography workflows to produce these layers are not documented, the products have been tested in regions with distinctive ridges and steep terrain and officially released in January 2021 (e.g. grand canyon\footnote{Opentopography CHM: \url{https://opentopography.org/news/opentopography-releases-canopy-height-model-tool}}). For the purpose of this assessment we will use it as a reference CHM. We provided Vibrant Planet with the DTM and point cloud from Opentopography to calculate a CHM within Fusion. For the third CHM model we used the raw point cloud to generate our own CHM model using PDAL and GDAL pipelines:

\begin{enumerate}
	\item CHM.topo provided by Opentopography using their own DTM.topo and DSM.topo (all 1 m$^2$)
	\item CHM.vp generated in Fusion using DTM.topo provided by Opentopography
	\item CHM.fly generated with PDAL and GDAL using the raw point cloud
\end{enumerate}

CHM.vp (2), Fusion workflow:

The Fusion workflow to create a CHM.vp uses the DTM.topo provided by Opentopography and has been produced by Vibrant Planet using the following steps:

\begin{enumerate}
	\item Conversion of *.tif file into *.asc using ArcGIS
	\item Conversion of *.asc into *.dtm to ingest into Fusion using inbuilt ‘ASCII2DTM’ function
	\item Producing a CHM using the converted DTM and raw point cloud information
	\item  Conversion of the CHM from *.dtm to *.tif using Fusion ‘DTM2TIF’ function
\end{enumerate}

The resulting CHM.vp (2) will be used in the consecutive accuracy assessment to compare it against the Opentopography generated CHM.topo (1).

CHM.fly (3), PDAL workflow:

Before we generated our final CHM.fly (3) with PDAL we produced a range of preliminary outputs and verified alignment, projection and pixel values with the existing datasets. Particularly the production of a gap-free DTM is a crucial process where a prior ground point filter has to be implemented to extract true last-return information from points which have been reflected by other surface features and aboveground vegetation. It is inevitable that the ground filter produces gaps within the point cloud for large trees with dense canopies. Therefore it is necessary to carefully select and adjust the ground filter as well as an interpolation process which does not exaggerate the height within the DTM. Successful generation of a DTM is verified by creating a hillshade output to check that the interpolation process does not accidentally create ‘surface bumps’ as a result of of incorporating mis-identified ground points a the center of trees into the process. The consecutive production of a gap-free DSM is a much more trivial task since it does not require an initial point classification. For this process all points can be used and the interpolation ‘drapes’ a surface on top of the point cloud. Once DTM.fly and DSM.fly are generated the CHM.fly can be calculated using a raster calculation in GDAL by subtracting the ground information from the surface information. The result is a CHM.fly for the Lemon Canyon extending $\sim$ 2.7 km$^2$, ~ 2.6 Million pixels at a resolution of 1m$^2$.


In order to assess the difference between the three different CHM’s the outputs by VP (2) and Dragonfly (3) were subtracted from the Opentopography CHM (1). The resulting layer can be analysed within QGIS raster statistics to calculate differences.


\subsection{Prototype Development}

The proof of concept demonstrates the capability of our model to upscale canopy height from areas with available LiDAR point cloud information to areas where information has not been collected. The prototype uses CHM information to train state-wide Sentinel-2 spectral information layers.  We used a canopy height model generated with our PDAL workflows from the raw point cloud of the Lake Tahoe basin area. The dataset has been collected from the USGS in a 2010 survey\footnote{USFS Lake Tahoe point cloud: \url{https://portal.opentopography.org/datasetMetadata?otCollectionID=OT.032011.26910.1}} and has a resolution of 13.20 pts m$^{-2}$. The LiDAR dataset provides pre-classified ground points at a resolution of 2.26 pts m${-2}. Within our workflow we will re-classify the points to improve the accuracy in the DTM.

The test region used in the final proof-of-concept is located within the city of Incline Village (California) located at the Northern tip of the Lake Tahoe. We selected the area due to Vibrant Planet’s high confidence in the quality of the LiDAR data collection and the proximity of one of VP’s members home. This process provides us with an additional ground-truth component in our CHM due to the limited availability of field plots.We also incorporated a rasterized version of the fire returnal interval departure (FRID 2019) dataset which contains 34 dominant vegetation classes from the CALVEG. All the datasets are projected into California Albers (EPSG:3310) and raster alignment is verified. We then calculate the normalised difference vegetation index (NVDI) from Sentinel-2 bands (NIR \& Red, 10 m). The 1 m resolution canopy height model and the FRID layer are used to train the 10x10 m Sentinel-2 pixels using a linear correlation between the mean canopy height and the NDVI values calculated from the spectral bands. The upscaling process predicts mean canopy height for areas where traditional LiDAR is unavailable.



add info from Kiarie and Bogdan here


